// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import "forge-std/Script.sol";
import {OnchainVerifier} from "../src/OnchainVerifier.sol";

contract CallVerify is Script {
    // @TODO: Update the address of the deployed OnchainVerifier contract
    address public constant onChainVerifier = address(0xb275Ac4ea388D10bF5A840eE7DC0E88420be599f);
    function run() external returns (bytes32 proofHash) {
        // dnn-2-10
        uint64[21] memory i_z0_zi = [2, 2650303842972797039, 3872117052966954028, 6923647347210735262, 1710566270451024970, 2020355664697906883, 0, 1271801425881964199, 3480570017453383799, 10238219182348656193, 5154328504180552938, 8356108978772267416, 6381274367781137767, 0, 290183017963711168, 3672905069153297622, 0, 6629557528649932700, 7506243874899148257, 0, 0];
        uint256[4] memory U_i_cmW_U_i_cmE = [185819605261938498175323637462413683704551826317260179136171903761501027244, 13228065169280252466431718161828904620092843624680304208775828611801945654570, 0, 0];
        uint256[2] memory u_i_cmW = [1360857363956596829727371908902636801574304236252309704134729046124114322305, 6601137640221819648911396213586160001129184263298734693326500750181420027453];
        uint256[3] memory cmT_r = [6071599663121594337377204644502338850230790748425095671456518868343628524214, 7509661722327583663940910840890214471325847346313688432058291914458088020207, 141777056311868864472651855889178680970];
        uint256[2] memory pA = [8283623555909795047368433912953697658162565799550294177564740821086312403998, 17427656058656160789747764606793657387974659012195602961989134327641372472121];
        uint256[2][2] memory pB = [[20025376610870042529441966290306658161231319378988823272034427388651984459304, 10106599839403710237883490718714540774937970356964829906608162028253936819130], [13037369376735450651007591773760260708242769904019672879873432940753796981343, 10630403297295067352188009268659843965017194399789319928040480640556873956168]];
        uint256[2] memory pC = [9397869916565189445113950267260755581378033347640753999897410568201138349976, 9428494407766307131949918594162625699990703193649713512117635617211025822172];
        uint256[4] memory challenge_W_challenge_E_kzg_evals = [11661293062831549459246437293967432990487714266754590738116090125617881008877, 2926921850415263897030174067410467770886567758530668755346818570684057780778, 1006052190342418118258982900209777950887285024371143557045979150706011444192, 3840254316312986399404237117714168238197567798537278279659689952218283273015];
        uint256[2][2] memory kzg_proof = [[4945804956531565439854732552026602251861239208813712780976727885019361897308, 10816372763197570216743679956814172280096567876734637065668904104739395595215], [21736318406815768357285742015845849219782384901541331806212502309888674858278, 12178652364713752515695229335204013227290249956577063573675924418179711032475]];
        OnchainVerifier verifier = OnchainVerifier(onChainVerifier);
        uint256 result=4;
         uint256[21] memory i_z0_zi_256;
        for (uint i = 0; i < 21; i++) i_z0_zi_256[i] = uint256(i_z0_zi[i]);
        // Start the transaction broadcast
        vm.startBroadcast();

        proofHash=verifier.verify(result, i_z0_zi_256, U_i_cmW_U_i_cmE, u_i_cmW, cmT_r, pA, pB, pC, challenge_W_challenge_E_kzg_evals, kzg_proof);

        // Stop the broadcast
        vm.stopBroadcast();

        // Output the deployed contract address
        console.log("OnchainVerifier address:", address(verifier));
    }

}